{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Learning about basic markov chain"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import random as rand"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "state = [\"Sleep\", \"Eat\", \"Code\"]\n",
    "transition_names = [\n",
    "    [\"SS\", \"SE\", \"SC\"],\n",
    "    [\"ES\", \"EE\", \"EC\"],\n",
    "    [\"CS\", \"CE\", \"CC\"]\n",
    "]\n",
    "transition_matrix = [\n",
    "    [0.7, 0.15, 0.15],\n",
    "    [0.1, 0.05, 0.85],\n",
    "    [0.05, 0.25, 0.7]\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "def forecast_activity(hours, start_state):\n",
    "    prob = 1\n",
    "    i = 0\n",
    "    activity_list = [start_state]\n",
    "    while hours >= i:\n",
    "        i += 1\n",
    "        if start_state == \"Sleep\":\n",
    "            change = np.random.choice(transition_names[0], replace=True, p=transition_matrix[0])\n",
    "            if change == \"SS\":\n",
    "                prob *= transition_matrix[0][0]\n",
    "                activity_list.append(\"Sleep\")\n",
    "            elif change == \"SE\":\n",
    "                prob *= transition_matrix[0][1]          \n",
    "                activity_list.append(\"Eat\")\n",
    "            else:\n",
    "                prob *= transition_matrix[0][2]\n",
    "                activity_list.append(\"Code\")\n",
    "\n",
    "        elif start_state == \"Eat\":\n",
    "            change = np.random.choice(transition_names[1], replace=True, p=transition_matrix[1])         \n",
    "            if change == \"SS\":\n",
    "                prob *= transition_matrix[1][0]\n",
    "                activity_list.append(\"Sleep\")                \n",
    "            elif change == \"SE\":\n",
    "                prob *= transition_matrix[1][1]     \n",
    "                activity_list.append(\"Eat\")               \n",
    "            else:\n",
    "                prob *= transition_matrix[1][2]\n",
    "                activity_list.append(\"Code\")               \n",
    "        \n",
    "        elif start_state == \"Code\":\n",
    "            change = np.random.choice(transition_names[2], replace=True, p=transition_matrix[2])\n",
    "            if change == \"SS\":\n",
    "                prob *= transition_matrix[2][0]\n",
    "                activity_list.append(\"Sleep\")                   \n",
    "            elif change == \"SE\":\n",
    "                prob *= transition_matrix[2][1]   \n",
    "                activity_list.append(\"Eat\")                   \n",
    "            else:\n",
    "                prob *= transition_matrix[2][2]\n",
    "                activity_list.append(\"Code\")                   \n",
    "        pass\n",
    "    \n",
    "    print(\"End state after \" + str(hours) + \" hours: \" + activity_list[-1])\n",
    "    print(\"Probability of the possible sequence of states: \" + str(prob))\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "End state after 8 hours: Code\n",
      "Probability of the possible sequence of states: 0.0003970653749999999\n"
     ]
    }
   ],
   "source": [
    "forecast_activity(8, \"Sleep\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
